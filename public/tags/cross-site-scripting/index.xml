<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Cross-Site Scripting on JakobTheDev | Jakob Pennington</title>
    <link>https://www.jakobthe.dev/tags/cross-site-scripting/</link>
    <description>Recent content in Cross-Site Scripting on JakobTheDev | Jakob Pennington</description>
    <image>
      <url>https://www.jakobthe.dev/images/profile.png</url>
      <link>https://www.jakobthe.dev/images/profile.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 08 Feb 2019 15:45:00 +1030</lastBuildDate><atom:link href="https://www.jakobthe.dev/tags/cross-site-scripting/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Exploiting XSS via Markdown</title>
      <link>https://www.jakobthe.dev/posts/exploiting-xss-via-markdown/</link>
      <pubDate>Fri, 08 Feb 2019 15:45:00 +1030</pubDate>
      
      <guid>https://www.jakobthe.dev/posts/exploiting-xss-via-markdown/</guid>
      <description>I recently came across a web application in which I was able to exploit a Cross-Site Scripting (XSS) vulnerability through a markdown editor and rendering package. It was the first time I had come across this type of vulnerability, and I found it particularly interesting because it allowed me to bypass multiple layers of XSS filtering that was implemented in the application. Hereâ€™s a short article on how I came across the vulnerability and set about crafting an exploit.</description>
    </item>
    
    <item>
      <title>Minifying XSS</title>
      <link>https://www.jakobthe.dev/posts/minifying-xss/</link>
      <pubDate>Sun, 18 Mar 2018 15:45:00 +1030</pubDate>
      
      <guid>https://www.jakobthe.dev/posts/minifying-xss/</guid>
      <description>How I bypassed Cross-Site Scripting sanitisation in fewer than 20 characters.</description>
    </item>
    
  </channel>
</rss>
