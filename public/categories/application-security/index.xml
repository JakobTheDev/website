<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Application Security on JakobTheDev | Jakob Pennington</title>
    <link>https://www.jakobthe.dev/categories/application-security/</link>
    <description>Recent content in Application Security on JakobTheDev | Jakob Pennington</description>
    <image>
      <url>https://www.jakobthe.dev/images/profile.png</url>
      <link>https://www.jakobthe.dev/images/profile.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 Jul 2020 15:45:00 +1030</lastBuildDate><atom:link href="https://www.jakobthe.dev/categories/application-security/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building hacking tools in Windows using Docker</title>
      <link>https://www.jakobthe.dev/posts/building-hacking-tools-docker/</link>
      <pubDate>Tue, 28 Jul 2020 15:45:00 +1030</pubDate>
      
      <guid>https://www.jakobthe.dev/posts/building-hacking-tools-docker/</guid>
      <description>Something that I have struggled with in the past as a software developer turned penetration tester is the fact that I use two operating systems on a daily basis, and this sometimes causes friction in my workflow.
Note: I really donâ€™t intend or want this to be a discussion of the merits of one OS or IDE compared with another. I use the tools that I am familiar and productive with, and itâ€™s totally cool if you use something different.</description>
    </item>
    
    <item>
      <title>Can Docker containers replace VMs for bug bounty hunters and penetration testers?</title>
      <link>https://www.jakobthe.dev/posts/docker-for-pentesters/</link>
      <pubDate>Wed, 22 Jul 2020 15:45:00 +1030</pubDate>
      
      <guid>https://www.jakobthe.dev/posts/docker-for-pentesters/</guid>
      <description>There were many things to consider, and we may talk about some of those things in the future, but the aspect of penetration testing I want to talk about today is the infrastructure we use to conduct a penetration test.
Note: With a few minor exceptions, the same thought process applies for bug bounty hunting. If thatâ€™s more your thing, feel free to sed s/penetration testing/bug bounty hunting/g.
What do we need from our infrastructure?</description>
    </item>
    
    <item>
      <title>Shifting Left: DevSecOps as an Approach to Building Secure Applications</title>
      <link>https://www.jakobthe.dev/posts/shifting-left/</link>
      <pubDate>Thu, 18 Jul 2019 15:45:00 +1030</pubDate>
      
      <guid>https://www.jakobthe.dev/posts/shifting-left/</guid>
      <description>Why traditional security testing should not be the core of your application security program.</description>
    </item>
    
    <item>
      <title>The Eight Phases of a DevOps Pipeline</title>
      <link>https://www.jakobthe.dev/posts/eight-phases-devops-pipeline/</link>
      <pubDate>Thu, 18 Jul 2019 15:45:00 +1030</pubDate>
      
      <guid>https://www.jakobthe.dev/posts/eight-phases-devops-pipeline/</guid>
      <description>Letâ€™s break down the phases of a DevOps pipeline and clarify some common terms.</description>
    </item>
    
    <item>
      <title>What is DevOps?</title>
      <link>https://www.jakobthe.dev/posts/what-is-devops/</link>
      <pubDate>Thu, 18 Jul 2019 15:45:00 +1030</pubDate>
      
      <guid>https://www.jakobthe.dev/posts/what-is-devops/</guid>
      <description>The simplest introduction to DevOps and the benefits it can provide to your organisation.</description>
    </item>
    
    <item>
      <title>Exploiting XSS via Markdown</title>
      <link>https://www.jakobthe.dev/posts/exploiting-xss-via-markdown/</link>
      <pubDate>Fri, 08 Feb 2019 15:45:00 +1030</pubDate>
      
      <guid>https://www.jakobthe.dev/posts/exploiting-xss-via-markdown/</guid>
      <description>I recently came across a web application in which I was able to exploit a Cross-Site Scripting (XSS) vulnerability through a markdown editor and rendering package. It was the first time I had come across this type of vulnerability, and I found it particularly interesting because it allowed me to bypass multiple layers of XSS filtering that was implemented in the application. Hereâ€™s a short article on how I came across the vulnerability and set about crafting an exploit.</description>
    </item>
    
    <item>
      <title>Breaking into Encrypted iPhone Backups</title>
      <link>https://www.jakobthe.dev/posts/breaking-into-iphone-backups/</link>
      <pubDate>Wed, 21 Nov 2018 15:45:00 +1030</pubDate>
      
      <guid>https://www.jakobthe.dev/posts/breaking-into-iphone-backups/</guid>
      <description>The day that being a hacker made me feel like a hero.</description>
    </item>
    
    <item>
      <title>Add Notifications to your AWS CI/CD Pipeline</title>
      <link>https://www.jakobthe.dev/posts/codepipeline-notifications/</link>
      <pubDate>Sun, 05 Aug 2018 15:45:00 +1030</pubDate>
      
      <guid>https://www.jakobthe.dev/posts/codepipeline-notifications/</guid>
      <description>This post is Part 3 in a ðŸ¤·-Part series on CI/CD in AWS. Go check out my other posts to see how we got here:
Part 1: Deploy a Single-Page Application (SPA) to AWS
Part 2: Automated Build / Deploy with AWS CodePipeline
In the last post, we set up a simple CI/CD pipeline that deploys our codebase into production each time new code is merged into the production codebase. This is great, but once we kick off a build we have two options:</description>
    </item>
    
    <item>
      <title>Automated Build / Deploy with AWS CodePipeline</title>
      <link>https://www.jakobthe.dev/posts/aws-codepipeline/</link>
      <pubDate>Sun, 22 Jul 2018 15:45:00 +1030</pubDate>
      
      <guid>https://www.jakobthe.dev/posts/aws-codepipeline/</guid>
      <description>In my last post, I showed how you can deploy a Single Page Application to AWS using AWSâ€™ S3, CloudFront and Route 53. This post picks up where the last one left off, so if you havenâ€™t read it, go check it out!
This time, weâ€™ll be improving our DevOps by building a basic CI/CD pipeline. Since weâ€™re already using AWS to host our site, it makes sense to keep using their services since they do integrate well together (Thatâ€™s how they get you!</description>
    </item>
    
    <item>
      <title>Deploy a Single Page Application (SPA) to AWS</title>
      <link>https://www.jakobthe.dev/posts/deploy-spa-aws/</link>
      <pubDate>Tue, 17 Jul 2018 15:45:00 +1030</pubDate>
      
      <guid>https://www.jakobthe.dev/posts/deploy-spa-aws/</guid>
      <description>Recently, I made a simple personal website â€” a hub for my online presences and a place to share my personal projects. I developed the site using the Angular CLI, and when it came time to host the site, I chose AWS since my domain was already set up in Route 53. Overall, the process of building the application and hosting it on AWS was a fairly simple one (you could probably set the whole thing up in about an hour), but there were a couple of gotchyas that prompted me to write down the process.</description>
    </item>
    
    <item>
      <title>Minifying XSS</title>
      <link>https://www.jakobthe.dev/posts/minifying-xss/</link>
      <pubDate>Sun, 18 Mar 2018 15:45:00 +1030</pubDate>
      
      <guid>https://www.jakobthe.dev/posts/minifying-xss/</guid>
      <description>How I bypassed Cross-Site Scripting sanitisation in fewer than 20 characters.</description>
    </item>
    
  </channel>
</rss>
